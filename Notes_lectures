// notes;


//Constructor: 
Class Student{

// constructor by default;
  public Student(){
  
  }
}

// constructor realoaded;
public Student(String a){
}

//If constructor (type by default) is not initializated -> use reloaded;


//getMethod, setMethod:
Used for set or get access to private fields from (for) other methods. Also for changing some fields without complex processes.

//constant:

private static final <type> <NAME_OF_FIELD> = <value>;

//Priority operation:

int size = 0;
int[] mas = new mas[5];
mas[size++] = 5;

1) Access to mas[0]
2) mas[0] = 5;
3) size++;

//Write test to each method;

Проектировать метод следует таким образом, чтобы при написании теста, было возможно сравнить реальный результат работы метода
c ожидаемым (expected).

//Example:
public boolean addStudent(Student student){
  // method's logic
  if (...) {return false;}
  if (...) {return false;}
  return true;
}


//Inheritance
is -a 
has - a

instanceOf  - check is-a
getClass()  - check exactly class, which you was created from

//Override methods - same signature.

Child's ovirridden method could exdend access modifier protected (packet-default) -> public

@Override  - mark of overriden method (check by compilator. is method overridden or not.)

//UML

1. Create UML Diagram
2. Create structure, signatures
3. Create tests
