// Structures

Static - structures builds on array. Got indexes, searching is really quickly. Examples: Arrays, ArrayList
Dynamic - structures, based on Nodes. Flexible, easy to add new element, but has complex process of searching. Examples: LinkedList

1) Not balanced (BST - binary search tree)

Look like linear chain (50->45->40->35->30)

2) Balanced Tree (AVL, RED-BLACK TREE) search and replace some elements;

// Java Collections

1) interface Iterable<E> - returns iterator (foreach)
2) interface Collection<E> - container for some data. got methods add, remove, retainAll,toArray etc. (Collection extends Iterable)
3) interface List<E> - methods with indexes. List is a sequence of elements.
4) AbstractList<E> implements List 

5) Set<E> - consist of unique elements only. Set extends Collection
5) Queue<E> - structure, which has methods with same actions, but returns different things. Queue extends Collection.

  add() returns exception
  offer() returns special value
  
6) Dequeue<E> - structure, which you want to use like a Queue or like a dequeue. Dequeue extends Queue.

// Hash

7) PriorityQueue<E> - got methods Comparator (Comparable) for define sequence of elements. 

Hashstructure -> array (static) -> use indexes

O(1):
add()
remove()
contains()

1)add method:
object -> hashcode() returns int a -> a % size = index -> add at [index] position

2)remove method
object -> hashcode() returns int a -> a % size = index -> check element on [index] position -> remove if equals

Colision:

If [index] where you want to put new element already using by another not equals element.

loadFactor:

If structure more 75% filled up -> make rehashing();

If you want override hashcode() you need ovverride equals();

//Map

1) HashMap
<key, value>

2) LinkedHashMap = HashMap + LinkedList;
Make sequence of Map's elements. 

3) TreeMap

Sorted structure

